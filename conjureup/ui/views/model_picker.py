from urwid import Columns, Filler, Frame, Pile, Text, WidgetWrap

from ubuntui.utils import Color, Padding
from ubuntui.widgets.buttons import menu_btn
from ubuntui.widgets.hr import HR
from ubuntui.widgets.input import StringEditor
from ubuntui.widgets.text import Instruction


class ModelPickerView(WidgetWrap):

    def __init__(self, app, suggested_model,
                 existing_models, error=None, cb=None):
        self.app = app
        self.suggested_model = StringEditor(default=suggested_model)
        self.existing_models = existing_models
        self.error = error
        self.cb = cb
        self.frame = Frame(body=self._build_widget(),
                           footer=self._build_footer())
        self.buttons_selected = True
        self.frame.focus_position = 'footer'
        self.buttons.focus_position = 3
        super().__init__(self.frame)

    def _build_widget(self):
        rows = [
            Padding.line_break(""),
            Instruction("Please enter a new name or use the one that has been "
                        "autogenerated for you:"),
            HR(),
            Padding.center_60(
                Columns(
                    [
                        ('weight', 0.5, Text("Enter a name:", align='right')),
                        Color.string_input(
                            self.suggested_model,
                            focus_map='string_input focus'
                        )
                    ], dividechars=1
                ))
        ]
        if self.existing_models:
            rows.append(Padding.line_break(""))
            rows.append(Padding.line_break(""))
            rows.append(Instruction(
                "Or highlight existing model and press [ENTER]"))
            rows.append(HR())
            for model in self.existing_models['models']:
                rows.append(
                    Color.body(
                        menu_btn(label=model['name'],
                                 on_press=self.submit,
                                 user_data={'model': model['name']}),
                        focus_map='menu_button focus'
                    )
                )
        return Padding.center_80(Filler(Pile(rows), valign='top'))

    def _build_footer(self):
        self.buttons = Columns([
            ('fixed', 2, Text("")),
            ('fixed', 13, Color.menu_button(menu_btn(on_press=self.back,
                                                     label="\n  BACK\n"),
                                            focus_map='button_primary focus')),
            Text(""),
            ('fixed', 13, Color.menu_button(menu_btn(
                on_press=self.submit,
                label="\n  NEXT\n",
                user_data={'model': self.suggested_model.value}),
                focus_map='button_primary focus')),
            ('fixed', 2, Text("")),
        ])

        return Pile([
            Color.frame_footer(Pile([
                Padding.line_break(""),
                self.buttons,
            ])),
        ])

    def _swap_focus(self):
        if not self.buttons_selected:
            self.buttons_selected = True
            self.frame.focus_position = 'footer'
            self.buttons.focus_position = 3
        else:
            self.buttons_selected = False
            self.frame.focus_position = 'body'

    def keypress(self, size, key):
        if key in ['tab', 'shift tab']:
            self._swap_focus()
        rv = super().keypress(size, key)
        return rv

    def submit(self, btn, result):
        self.cb(result['model'])

    def back(self, btn):
        self.cb(None, back=True)
